AWSTemplateFormatVersion: '2010-09-09'
Description: container cluster on ECS, loadbalancer, security groups and cloudwatch

Parameters:
  VPCStackName:
    Type: String

Resources:
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'stw-aws-ecs-microservices'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Name: ecs-services
      Subnets:
        - Fn::ImportValue:
              !Sub "${VPCStackName}-SubnetPrivate1-Id"   
        - Fn::ImportValue:
              !Sub "${VPCStackName}-SubnetPrivate2-Id"   
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: 
        Fn::ImportValue:
          !Sub "${VPCStackName}-Vpc-Id"  
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId:  
        Fn::ImportValue:
          !Sub "${VPCStackName}-Vpc-Id"  
      Protocol: 'HTTP'
      Port: '80'  

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'stw-aws-ecs-microservices-lg'
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup      
    Properties:
     VpcId:  
      Fn::ImportValue:
          !Sub "${VPCStackName}-Vpc-Id"  
     GroupDescription: for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: -1

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'


Outputs:
  
  Cluster:
    Value: !Ref ECSCluster
    Export:
      Name:  !Sub ${AWS::StackName}-Cluster

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name:  !Sub ${AWS::StackName}-Listener

  ContainerSecurityGroup:
    Description: container security group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name:  !Sub ${AWS::StackName}-ContainerSecurityGroup

  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name:  !Sub ${AWS::StackName}-LoadBalancerDNS

  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskExecutionRole



